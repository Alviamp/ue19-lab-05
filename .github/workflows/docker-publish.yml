name: Docker Build and Trivy Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to Docker registry (GitHub Packages)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}/my-app:latest .

      # Step 5: Cache Trivy DB to speed up future scans
      - name: Cache Trivy DB
        uses: actions/cache@v2
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      # Step 6: Scan the Docker image with Trivy for vulnerabilities
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.5.0
        with:
          image-ref: ghcr.io/${{ github.repository }}/my-app:latest
          format: 'table'  # You can also use 'json' or 'sarif' depending on your needs

      # Step 7: Push the Docker image to GitHub Packages if no vulnerabilities are found
      - name: Push Docker image
        if: success()
        run: docker push ghcr.io/${{ github.repository }}/my-app:latest

      # Scanner l'image Docker pour les vulnérabilités avec Trivy
      - name: Scan Docker image for vulnerabilities
        run: |
          trivy image --no-progress --exit-code 1 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
